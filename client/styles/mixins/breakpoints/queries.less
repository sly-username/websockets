
/**
 * Base media types
 *  all, print, screen, speech
 **/
.media( all; @rules ) {
  @media all {
    @rules();
  }
}

.media( print; @rules ) {
  @media print {
    @rules();
  }
}
.mediaOnly( print; @rules ) {
  @media only print {
    @rules();
  }
}

.media( screen; @rules ) {
  @media screen {
    @rules();
  }
}
.mediaOnly( screen; @rules ) {
  @media only screen {
    @rules();
  }
}

.media( speech; @rules ) {
  @media speech {
    @rules();
  }
}
.mediaOnly( speech; @rules ) {
  @media only speech {
    @rules();
  }
}


/***
  Media Features

@media (color) { ... }
@media (min-color: 4) { ... }
  has min/max
  value: the number of bits per color component of the device

@media (color-index) { ... }
@media (min-color-index: 256) { ... }
  has min/max
  value: number of entries in the color look-up table
*/

/*
@media (min-aspect-ratio: 1/1) { ... }
  has min/max
  value: The aspect ratio fo the target display area, horizontal px / vertical px
*/
.aspectRatio( @ratio; @rules ) {
  @media (aspect-ratio: @ratio) {
    @rules();
  }
}
.aspectRatio( min; @ratio; @rules ){
  @media (min-aspect-ratio: @ratio) {
    @rules();
  }
}
.aspectRatio( max; @ratio; @rules ){
  @media (max-aspect-ratio: @ratio) {
    @rules();
  }
}
.minAspectRatio( @ratio; @rules ) {
  .aspectRatio(min; @ratio; @rules);
}
.maxAspectRatio( @ratio; @rules ) {
  .aspectRatio(max; @ratio; @rules);
}

/*
@media (device-aspect-ratio: 16/9) { ... }
  has min/max
  value: Aspect ratio of the device, horizontal/vertical
*/
.deviceAspectRatio( @ratio; @rules ) {
  @media (device-aspect-ratio: @ratio) {
    @rules();
  }
}
.deviceAspectRatio( min; @ratio; @rules ) {
  @media (min-device-aspect-ratio: @ratio) {
    @rules();
  }
}
.deviceAspectRatio( max; @ratio; @rules ) {
  @media (max-device-aspect-ratio: @ratio) {
    @rules();
  }
}
.minDeviceAspectRatio( @ratio; @rules ) {
  .deviceAspectRatio(min; @ratio; @rules);
}
.maxDeviceAspectRatio( @ratio; @rules ) {
  .deviceAspectRatio(max; @ratio; @rules);
}

/*
@media (max-device-height: 799px) { ... }
  has min/max
  value: height of the output device, (screen size, not just rendering area)
*/
.deviceHeight( @height; @rules ){
  @media (device-height: @height) {
    @rules();
  }
}
.deviceHeight( min; @height; @rules ){
  @media (min-device-height: @height) {
    @rules();
  }
}
.deviceHeight( max; @height; @rules ){
  @media (max-device-height: @height) {
    @rules();
  }
}
.minDeviceHeight( @height; @rules ){
  .deviceHeight( min; @height; @rules );
}
.maxDeviceHeight( @height; @rules ){
  .deviceHeight( max; @height; @rules );
}

/*
@media (max-device-width: 799px) { ... }
  has min/max
  value: width of the output device, (screen size, not just rendering area)
*/
.deviceWidth( @width; @rules ){
  @media (device-width: @width) {
    @rules();
  }
}
.deviceWidth( min; @width; @rules ) {
  @media (min-device-width: @width) {
    @rules();
  }
}
.deviceWidth( max; @width; @rules ){
  @media (max-device-width: @width) {
    @rules();
  }
}
.minDeviceWidth( @width; @rules ){
  .deviceWidth( min; @width; @rules );
}
.maxDeviceWidth( @width; @rules ){
  .deviceWidth( max; @width; @rules );
}

/*
// No real support yet
@media handheld and (grid) and (max-width: 15em) { ... }
(grid)
  1 if output device is a grid or bitmap device
  0 otherwise
  "em" -- 1em is one cell of the grid horizontally and vertically
*/

/*
@media (height: 10px) { ... }
  has min/max
  height of the device's rendering surface
  TODO BETTER NAME
*/
.queryHeight( @height; @rules ){
  @media (height: @height) {
    @rules();
  }
}
.queryHeight( min; @height; @rules ){
  @media (min-height: @height) {
    @rules();
  }
}
.queryHeight( max; @height; @rules ){
  @media (max-height: @height) {
    @rules();
  }
}

/*
@media (min-width: 500px) and (max-width: 800px) { ... }
  has min/max
  value: the width of the rendering surface
  TODO BETTER NAME
*/
.queryWidth( @width; @rules ){
  @media (width: @width) {
    @rules();
  }
}
.queryWidth( min; @width; @rules ){
  @media (min-width: @width) {
    @rules();
  }
}
.queryWidth( max; @width; @rules ){
  @media (max-width: @width) {
    @rules();
  }
}

/*
@media (monochrome) { ... }
  has min/max
  value: number of bits per pixel, 0 if not monochrome device
*/
.monochrome( @rules ) when (isruleset(@rules)){
  @media (monochrome) {
    @rules();
  }
}
.monochrome( @bitsPerPixel; @rules ){
  @media (monochrome: @bitsPerPixel) {
    @rules();
  }
}
.monochrome( min; @bitsPerPixel; @rules ) {
  @media (min-monochrome: @bitsPerPixel) {
    @rules();
  }
}
.monochrome( max; @bitsPerPixel; @rules ){
  @media (max-monochrome: @bitsPerPixel) {
    @rules();
  }
}
.minMonochrome( @bitsPerPixel; @rules ){
  .monochrome( min; @bitsPerPixel; @rules );
}
.maxMonochrome( @bitsPerPixel; @rules ){
  .monochrome( max; @bitsPerPixel; @rules );
}

/*
@media (orientation: portrait) { ... }
  value: landscape | portrait
  landscape: the display is wider than it is tall
  portrait: the display is taller than it is wide
*/
.orientation( landscape; @rules ){
  @media (orientation: landscape) {
    @rules();
  }
}
.orientation( portrait; @rules ){
  @media (orientation: portrait) {
    @rules();
  }
}

/*
@media (resolution) { ... }
  has min/max
  value: resolution in dpi or dpcm
  indicates the pixel density of the device
*/
.resolution( @density; @rules ){
  @media (resolution: @density){
    @rules();
  }
}
.resolution( min; @density; @rules ){
  @media (min-resolution: @density){
    @rules();
  }
}
.resolution( max; @density; @rules ){
  @media (max-resolution: @density){
    @rules();
  }
}
.minResolution( @density; @rules ){
  .resolution( min; @density; @rules );
}
.maxResolution( @density; @rules ){
  .resolution( max; @density; @rules );
}
.resolution( high; @rules ){
  .resolution( 2dppx; @rules );
}

/*
// No real support yet, since TV is not supported
@media (scan: progressive | interlace) // tv only
  scanning process of TV outputs
*/
