
/**
 * Base media types
 *  all, print, screen, speech
 **/
.media( all, @rules ) {
  @media all {
    @rules();
  }
}

.media( print, @rules ) {
  @media print {
    @rules();
  }
}

.media( screen, @rules ) {
  @media screen {
    @rules();
  }
}

.media( speech, @rules ) {
  @media speech {
    @rules();
  }
}

// Orientation



/*

Media Features

@media (color) { ... }
@media (min-color: 4) { ... }
  has min/max
  value: the number of bits per color component of the device

@media (color-index) { ... }
@media (min-color-index: 256) { ... }
  has min/max
  value: number of entries in the color look-up table

@media (min-aspect-ratio: 1/1) { ... }
  has min/max
  value: The aspect ratio fo the target display area, horizontal px / vertical px

@media (device-aspect-ratio: 16/9) { ... }
  has min/max
  value: Aspect ratio of the device, horizontal/vertical

@media (max-device-height: 799px) { ... }
  has min/max
  value: height of the output device, (screen size, not just rendering area)

@media (max-device-width: 799px) { ... }
  has min/max
  value: width of the output device, (screen size, not just rendering area)

// No real support yet
@media handheld and (grid) and (max-width: 15em) { ... }
(grid)
  1 if output device is a grid or bitmap device
  0 otherwise
  "em" -- 1em is one cell of the grid horizontally and vertically

@media (height: 10px) { ... }
  has min/max
  height of the device's rendering surface

@media (monochrome) { ... }
  has min/max
  value: number of bits per pixel, 0 if not monochrome device

@media (orientation: portrait) { ... }
  value: landscape | portrait
  landscape: the display is wider than it is tall
  portrait: the dispaly is taller than it is wide

@media (resolution) { ... }
  has min/max
  value: resolution in dpi or dpcm
  indicates the pixel density of the device

// No real support yet, since TV is not supported
@media (scan: progressive | interlace) // tv only
  scanning process of TV outputs

@media (min-width: 500px) and (max-width: 800px) { ... }
  has min/max
  value: the width of the rendering surface

*/
