// Generated by CoffeeScript 1.9.1
(function() {
  var cli, filter, human, level, logger,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  level = indexOf.call(process.argv, '-d') >= 0 ? 7 : 6;

  logger = new (require('caterpillar').Logger)({
    level: level
  });

  filter = new (require('caterpillar-filter').Filter)();

  human = new (require('caterpillar-human').Human)();

  logger.pipe(filter).pipe(human).pipe(process.stdout);

  cli = require('commander');

  cli.version(require('../../package.json').version);

  cli.option('-p, --path [value]', "Path to the project that you wish to work with, defaults to the current working directory");

  cli.option('-d', "Outputs verbose logging.");

  cli.command('compile').description('Compile our project').action(function() {
    var project;
    logger.log('info', 'Initialising project');
    project = require('../../').create({
      log: logger.log.bind(logger),
      cwd: cli.path || null
    });
    logger.log('info', 'Initialised project');
    logger.log('info', 'Loading changes');
    return project.load(function(err) {
      if (err) {
        return logger.log('err', err.stack);
      }
      logger.log('info', 'Loaded changes');
      return project.save(function(err) {
        if (err) {
          return logger.log('err', err.stack);
        }
        return logger.log('info', 'Saved changes');
      });
    });
  });

  cli.parse(process.argv);

}).call(this);
