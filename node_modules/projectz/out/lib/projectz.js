// Generated by CoffeeScript 1.8.0
(function() {
  var CSON, Projectz, TaskGroup, backerUtil, badgeUtil, eachr, extendr, fsUtil, historyUtil, installUtil, licenseUtil, oneDay, pathUtil, projectzUtil, typeChecker,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  fsUtil = require('safefs');

  pathUtil = require('path');

  CSON = require('cson');

  typeChecker = require('typechecker');

  TaskGroup = require('taskgroup').TaskGroup;

  eachr = require('eachr');

  extendr = require('extendr');

  backerUtil = require('./backer-util');

  badgeUtil = require('./badge-util');

  historyUtil = require('./history-util');

  installUtil = require('./install-util');

  licenseUtil = require('./license-util');

  projectzUtil = require('./projectz-util');

  oneDay = 1000 * 60 * 60 * 24;

  Projectz = (function() {
    Projectz.prototype.cwd = null;

    Projectz.prototype.pathsForPackages = null;

    Projectz.prototype.pathsForReadmes = null;

    Projectz.prototype.dataForPackages = null;

    Projectz.prototype.dataForPackagesMerged = null;

    Projectz.prototype.dataForPackagesEnhanced = null;

    Projectz.prototype.dataForReadmes = null;

    Projectz.prototype.dataForReadmesEnhanced = null;

    Projectz.prototype.log = null;

    function Projectz(opts) {
      if (opts == null) {
        opts = {};
      }
      this.log = __bind(this.log, this);
      if (opts.cwd) {
        this.cwd = pathUtil.resolve(opts.cwd);
      }
      if (this.cwd == null) {
        this.cwd = process.cwd();
      }
      this.log = opts.log || null;
      this.pathsForPackages = {
        projectz: pathUtil.join(this.cwd, 'projectz.cson'),
        "package": pathUtil.join(this.cwd, 'package.json'),
        bower: pathUtil.join(this.cwd, 'bower.json'),
        component: pathUtil.join(this.cwd, 'component.json'),
        jquery: pathUtil.join(this.cwd, 'jquery.json')
      };
      this.pathsForReadmes = {
        readme: pathUtil.join(this.cwd, 'README.md'),
        history: pathUtil.join(this.cwd, 'HISTORY.md'),
        contributing: pathUtil.join(this.cwd, 'CONTRIBUTING.md'),
        backers: pathUtil.join(this.cwd, 'BACKERS.md'),
        license: pathUtil.join(this.cwd, 'LICENSE.md'),
        travis: pathUtil.join(this.cwd, '.travis.yml')
      };
    }

    Projectz.prototype.log = function() {
      var args, _base;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (typeof (_base = this.config).log === "function") {
        _base.log.apply(_base, args);
      }
      return this;
    };

    Projectz.prototype.load = function(next) {
      var tasks;
      this.dataForPackages = {};
      this.dataForPackagesMerged = {};
      this.dataForPackagesEnhanced = {};
      this.dataForReadmes = {};
      this.dataForReadmesEnhanced = {};
      tasks = new TaskGroup().done(next);
      tasks.addTask(this.loadPaths.bind(this));
      tasks.addTask(this.mergePackages.bind(this));
      tasks.addTask(this.loadContributors.bind(this));
      tasks.addTask(this.enhancePackages.bind(this));
      tasks.addTask(this.enhanceReadmes.bind(this));
      return tasks.run();
      return this;
    };

    Projectz.prototype.loadContributors = function(next) {
      var fetchContributors, log, repo;
      log = this.log;
      repo = this.dataForPackagesMerged.repo;
      if (!repo) {
        log('info', 'Skipping loading contributors as project repo is not defined');
        return next();
        this;
      }
      fetchContributors = require('getcontributors').create({
        log: this.log,
        cache: oneDay
      });
      fetchContributors.fetchContributorsFromRepos([repo], (function(_this) {
        return function(err, result) {
          var contributors;
          if (err) {
            return next(err);
          }
          _this.dataForPackagesMerged.contributors = contributors = fetchContributors.getContributors();
          log('info', "Loaded " + contributors.length + " contributors from " + repo + " repository");
          return next();
        };
      })(this));
      return this;
    };

    Projectz.prototype.loadPaths = function(next) {
      var tasks;
      tasks = new TaskGroup().setConfig({
        concurrency: 0
      }).done(next);
      tasks.addTask((function(_this) {
        return function(complete) {
          return _this.loadPackages(_this.pathsForPackages, function(err, dataForPackages) {
            if (err) {
              return complete(err);
            }
            _this.dataForPackages = dataForPackages;
            return complete();
          });
        };
      })(this));
      tasks.addTask((function(_this) {
        return function(complete) {
          return _this.loadReadmes(_this.pathsForReadmes, function(err, dataForReadmes) {
            if (err) {
              return complete(err);
            }
            _this.dataForReadmes = dataForReadmes;
            return complete();
          });
        };
      })(this));
      return tasks.run();
      return this;
    };

    Projectz.prototype.loadPackages = function(pathsForPackages, next) {
      var dataForPackages, tasks;
      dataForPackages = {};
      tasks = new TaskGroup().setConfig({
        concurrency: 0
      }).done(function(err) {
        if (err) {
          return next(err);
        }
        return next(null, dataForPackages);
      });
      eachr(pathsForPackages, function(value, key) {
        tasks.addTask(function(complete) {
          dataForPackages[key] = null;
          return fsUtil.exists(value, function(exists) {
            var result;
            if (exists === false) {
              return complete();
            }
            result = CSON.parseFile(value);
            if (result instanceof Error) {
              return complete(result);
            }
            dataForPackages[key] = result;
            return complete();
          });
        });
        return true;
      });
      return tasks.run();
      return this;
    };

    Projectz.prototype.loadReadmes = function(pathsForReadmes, next) {
      var dataForReadmes, tasks;
      dataForReadmes = {};
      tasks = new TaskGroup().setConfig({
        concurrency: 0
      }).done(function(err) {
        if (err) {
          return next(err);
        }
        return next(null, dataForReadmes);
      });
      eachr(pathsForReadmes, function(value, key) {
        return tasks.addTask(function(complete) {
          dataForReadmes[key] = null;
          return fsUtil.exists(value, function(exists) {
            if (exists === false) {
              return complete();
            }
            return fsUtil.readFile(value, function(err, data) {
              if (err) {
                return complete(err);
              }
              dataForReadmes[key] = data.toString();
              return complete();
            });
          });
        });
      });
      return tasks.run();
      return this;
    };

    Projectz.prototype.mergePackages = function(next) {
      var _base, _base1, _base10, _base11, _base12, _base13, _base14, _base15, _base16, _base17, _base18, _base19, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9, _ref, _ref1;
      extendr.extend(this.dataForPackagesMerged, this.dataForPackages.component, this.dataForPackages.bower, this.dataForPackages.jquery, this.dataForPackages["package"], this.dataForPackages.projectz);
      if ((_base = this.dataForPackagesMerged).badges == null) {
        _base.badges = {};
      }
      if ((_base1 = this.dataForPackagesMerged).readmes == null) {
        _base1.readmes = {};
      }
      if ((_base2 = this.dataForPackagesMerged).packages == null) {
        _base2.packages = {};
      }
      eachr(this.dataForReadmes, (function(_this) {
        return function(value, name) {
          var _ref, _ref1;
          _this.dataForPackagesMerged.readmes[name] = (_ref = (_ref1 = _this.dataForPackages.readmes) != null ? _ref1[name] : void 0) != null ? _ref : value != null;
          return true;
        };
      })(this));
      eachr(this.dataForPackages, (function(_this) {
        return function(value, name) {
          var _ref, _ref1;
          _this.dataForPackagesMerged.packages[name] = (_ref = (_ref1 = _this.dataForPackages.packages) != null ? _ref1[name] : void 0) != null ? _ref : value != null;
          return true;
        };
      })(this));
      if ((_base3 = this.dataForPackagesMerged.badges).travis == null) {
        _base3.travis = this.dataForReadmes.travis != null;
      }
      if ((_base4 = this.dataForPackagesMerged.badges).npm == null) {
        _base4.npm = this.dataForPackages["package"] != null;
      }
      if ((_base5 = this.dataForPackagesMerged.badges).npmdownloads == null) {
        _base5.npmdownloads = this.dataForPackages["package"] != null;
      }
      if ((_base6 = this.dataForPackagesMerged.badges).david == null) {
        _base6.david = this.dataForPackages["package"] != null;
      }
      if ((_base7 = this.dataForPackagesMerged.badges).daviddev == null) {
        _base7.daviddev = this.dataForPackagesMerged.badges.david;
      }
      if (this.dataForPackagesMerged.browser || this.dataForPackagesMerged.packages.component || this.dataForPackagesMerged.packages.bower) {
        if ((_base8 = this.dataForPackagesMerged).browsers == null) {
          _base8.browsers = true;
        }
      }
      if ((_base9 = this.dataForPackagesMerged).homepage == null) {
        _base9.homepage = this.dataForPackagesMerged.homepage;
      }
      if ((_base10 = this.dataForPackagesMerged).demo == null) {
        _base10.demo = this.dataForPackagesMerged.homepage;
      }
      if (!this.dataForPackagesMerged.repo) {
        if ((_ref = this.dataForPackagesMerged.repository) != null ? _ref.url : void 0) {
          this.dataForPackagesMerged.repo = (_ref1 = this.dataForPackagesMerged.repository) != null ? _ref1.url : void 0;
        } else if ((this.dataForPackagesMerged.homepage || '').indexOf('github.com') !== -1) {
          this.dataForPackagesMerged.repo = this.dataForPackagesMerged.homepage;
        }
      }
      if (this.dataForPackagesMerged.repo) {
        this.dataForPackagesMerged.repo = this.dataForPackagesMerged.repo.replace(/^.+?github.com\//, '').replace(/(\.git|\/)+$/, '') || null;
      }
      if (this.dataForPackagesMerged.name) {
        if ((_base11 = this.dataForPackagesMerged).title == null) {
          _base11.title = this.dataForPackagesMerged.name;
        }
      }
      if (this.dataForPackagesMerged.repo) {
        if ((_base12 = this.dataForPackagesMerged).username == null) {
          _base12.username = this.dataForPackagesMerged.repo.replace(/\/.*$/, '');
        }
      }
      if (this.dataForPackagesMerged.repo) {
        if ((_base13 = this.dataForPackagesMerged).repository == null) {
          _base13.repository = {
            type: 'git',
            url: "https://github.com/" + this.dataForPackagesMerged.repo + ".git"
          };
        }
        if ((_base14 = this.dataForPackagesMerged).bugs == null) {
          _base14.bugs = {
            url: "https://github.com/" + this.dataForPackagesMerged.repo + "/issues"
          };
        }
      }
      if (typeChecker.isString(this.dataForPackagesMerged.keywords)) {
        this.dataForPackagesMerged.keywords = this.dataForPackagesMerged.keywords.split(/[,\n]+/);
      }
      if ((_base15 = this.dataForPackagesMerged).contributors == null) {
        _base15.contributors = [];
      }
      if ((_base16 = this.dataForPackagesMerged).sponsors == null) {
        _base16.sponsors = [];
      }
      if (typeChecker.isString(this.dataForPackagesMerged.sponsors)) {
        this.dataForPackagesMerged.sponsors = this.dataForPackagesMerged.sponsors.split(/[,\n]/).map(function(i) {
          return i.trim();
        });
      }
      if ((_base17 = this.dataForPackagesMerged).maintainers == null) {
        _base17.maintainers = this.dataForPackagesMerged.maintainer || '';
      }
      if (typeChecker.isString(this.dataForPackagesMerged.maintainers)) {
        this.dataForPackagesMerged.maintainers = this.dataForPackagesMerged.maintainers.split(/[,\n]/).map(function(i) {
          return i.trim();
        });
      }
      if (!typeChecker.isArray(this.dataForPackagesMerged.maintainers)) {
        this.dataForPackagesMerged.maintainers = [this.dataForPackagesMerged.maintainers];
      }
      this.dataForPackagesMerged.maintainer = this.dataForPackagesMerged.maintainers.join(', ');
      if ((_base18 = this.dataForPackagesMerged).authors == null) {
        _base18.authors = this.dataForPackagesMerged.author || '';
      }
      if (typeChecker.isString(this.dataForPackagesMerged.authors)) {
        this.dataForPackagesMerged.authors = this.dataForPackagesMerged.authors.split(/[,\n]/).map(function(i) {
          return i.trim();
        });
      }
      if (!typeChecker.isArray(this.dataForPackagesMerged.authors)) {
        this.dataForPackagesMerged.authors = [this.dataForPackagesMerged.authors];
      }
      this.dataForPackagesMerged.author = this.dataForPackagesMerged.authors.join(', ');
      if ((_base19 = this.dataForPackagesMerged).licenses == null) {
        _base19.licenses = this.dataForPackagesMerged.license || '';
      }
      if (typeChecker.isString(this.dataForPackagesMerged.licenses)) {
        this.dataForPackagesMerged.licenses = this.dataForPackagesMerged.licenses.split(/[,\n]/).map(function(i) {
          return i.trim();
        });
      }
      if (!typeChecker.isArray(this.dataForPackagesMerged.licenses)) {
        this.dataForPackagesMerged.licenses = [this.dataForPackagesMerged.licenses];
      }
      this.dataForPackagesMerged.licenses = this.dataForPackagesMerged.licenses.map((function(_this) {
        return function(value) {
          if (typeChecker.isString(value)) {
            value = {
              type: value
            };
          }
          return value;
        };
      })(this));
      delete this.dataForPackagesMerged.license;
      return next();
      return this;
    };

    Projectz.prototype.enhancePackages = function(next) {
      var _ref, _ref1;
      this.dataForPackagesEnhanced["package"] = extendr.extend({}, this.dataForPackages["package"], {
        name: this.dataForPackagesMerged.name,
        version: this.dataForPackagesMerged.version,
        licenses: this.dataForPackagesMerged.licenses,
        description: this.dataForPackagesMerged.description,
        keywords: this.dataForPackagesMerged.keywords,
        author: this.dataForPackagesMerged.author,
        maintainers: this.dataForPackagesMerged.maintainers,
        contributors: this.dataForPackagesMerged.contributors.map(function(contributor) {
          return contributor.text;
        }),
        bugs: this.dataForPackagesMerged.bugs,
        engines: this.dataForPackagesMerged.engines,
        dependencies: this.dataForPackagesMerged.dependencies,
        devDependencies: this.dataForPackagesMerged.devDependencies,
        main: this.dataForPackagesMerged.main
      }, this.dataForPackagesMerged.packages["package"]);
      switch (this.dataForPackagesEnhanced["package"].licenses.length) {
        case 0:
          delete this.dataForPackagesEnhanced["package"].licenses;
          delete this.dataForPackagesEnhanced["package"].license;
          break;
        case 1:
          this.dataForPackagesEnhanced["package"].license = this.dataForPackagesEnhanced["package"].licenses[0];
          delete this.dataForPackagesEnhanced["package"].licenses;
          break;
        case 2:
          delete this.dataForPackagesEnhanced["package"].license;
      }
      this.dataForPackagesEnhanced.jquery = extendr.extend({}, this.dataForPackages.jquery, this.dataForPackagesEnhanced["package"], this.dataForPackagesMerged.jquery);
      this.dataForPackagesEnhanced.component = extendr.extend({}, this.dataForPackages.component, {
        name: this.dataForPackagesMerged.name,
        version: this.dataForPackagesMerged.version,
        license: (_ref = this.dataForPackagesMerged.licenses) != null ? _ref[0].type : void 0,
        description: this.dataForPackagesMerged.description,
        keywords: this.dataForPackagesMerged.keywords,
        demo: this.dataForPackagesMerged.demo,
        main: this.dataForPackagesMerged.main,
        scripts: [this.dataForPackagesMerged.main]
      }, this.dataForPackagesMerged.packages.component);
      this.dataForPackagesEnhanced.bower = extendr.extend({}, this.dataForPackages.bower, {
        name: this.dataForPackagesMerged.name,
        version: this.dataForPackagesMerged.version,
        license: (_ref1 = this.dataForPackagesMerged.licenses) != null ? _ref1[0].type : void 0,
        description: this.dataForPackagesMerged.description,
        keywords: this.dataForPackagesMerged.keywords,
        main: this.dataForPackagesMerged.main
      }, this.dataForPackagesMerged.packages.bower);
      return next();
      return this;
    };

    Projectz.prototype.enhanceReadmes = function(next) {
      var opts;
      opts = this.dataForPackagesMerged;
      eachr(this.dataForReadmes, (function(_this) {
        return function(data, name) {
          if (!data) {
            return;
          }
          data = projectzUtil.replaceSection(['TITLE', 'NAME'], data, "# " + opts.title);
          data = projectzUtil.replaceSection(['BADGES', 'BADGE'], data, badgeUtil.getBadgesSection(opts));
          data = projectzUtil.replaceSection(['DESCRIPTION'], data, "" + opts.description);
          data = projectzUtil.replaceSection(['INSTALL'], data, installUtil.getInstallInstructions(opts));
          data = projectzUtil.replaceSection(['CONTRIBUTE', 'CONTRIBUTING'], data, backerUtil.getContributeSection(opts));
          data = projectzUtil.replaceSection(['BACKERS', 'BACKER'], data, backerUtil.getBackerSection(opts));
          data = projectzUtil.replaceSection(['BACKERSFILE', 'BACKERFILE'], data, backerUtil.getBackerFile(opts));
          data = projectzUtil.replaceSection(['HISTORY', 'CHANGES', 'CHANGELOG'], data, historyUtil.getHistorySection(opts));
          data = projectzUtil.replaceSection(['LICENSE', 'LICENSES'], data, licenseUtil.getLicenseSection(opts));
          data = projectzUtil.replaceSection(['LICENSEFILE'], data, licenseUtil.getLicenseFile(opts));
          _this.dataForReadmesEnhanced[name] = data;
          return true;
        };
      })(this));
      return next();
      return this;
    };

    Projectz.prototype.save = function(next) {
      var log, tasks;
      log = this.log;
      log('info', "Writing changes...");
      tasks = new TaskGroup().setConfig({
        concurrency: 0
      }).done(function(err) {
        if (err) {
          return next(err);
        }
        log('info', "Wrote changes");
        return next();
      });
      eachr(this.dataForPackagesMerged.packages, (function(_this) {
        return function(enabled, name) {
          var path;
          if (name === 'projectz') {
            return;
          }
          if (!enabled) {
            log('info', "Skipping package file: " + name);
            return;
          }
          path = _this.pathsForPackages[name];
          log('info', "Writing package file: " + path);
          tasks.addTask(function(complete) {
            var data;
            data = JSON.stringify(_this.dataForPackagesEnhanced[name], null, '  ') + '\n';
            return fsUtil.writeFile(path, data, complete);
          });
          return true;
        };
      })(this));
      eachr(this.dataForPackagesMerged.readmes, (function(_this) {
        return function(enabled, name) {
          var path;
          if (name === 'projectz') {
            return;
          }
          if (!enabled) {
            log('info', "Skipping readme file: " + name);
            return;
          }
          path = _this.pathsForReadmes[name];
          log('info', "Writing readme file: " + name);
          tasks.addTask(function(complete) {
            var data;
            data = _this.dataForReadmesEnhanced[name];
            return fsUtil.writeFile(path, data, complete);
          });
          return true;
        };
      })(this));
      return tasks.run();
      return this;
    };

    return Projectz;

  })();

  module.exports = {
    Projectz: Projectz,
    create: function(opts) {
      return new Projectz(opts);
    }
  };

}).call(this);
