// Generated by CoffeeScript 1.8.0
(function() {
  var Getter, TaskGroup, extendr, typeChecker,
    __slice = [].slice;

  typeChecker = require('typechecker');

  extendr = require('extendr');

  TaskGroup = require('taskgroup').TaskGroup;

  Getter = (function() {
    Getter.prototype.contributorsMap = null;

    Getter.prototype.config = null;

    function Getter(opts) {
      var _base, _base1;
      if (opts == null) {
        opts = {};
      }
      this.config = {};
      this.contributorsMap = {};
      this.reposGetter = require('getrepos').create(opts);
      extendr.extend(this.config, opts);
      if ((_base = this.config).githubClientId == null) {
        _base.githubClientId = process.env.GITHUB_CLIENT_ID || null;
      }
      if ((_base1 = this.config).githubClientSecret == null) {
        _base1.githubClientSecret = process.env.GITHUB_CLIENT_SECRET || null;
      }
      this.feedr = new (require('feedr').Feedr)(this.config);
      this;
    }

    Getter.prototype.log = function() {
      var args, _base;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (typeof (_base = this.config).log === "function") {
        _base.log.apply(_base, args);
      }
      return this;
    };

    Getter.prototype.addContributor = function(contributor) {
      var contributorData, existingContributorData, _base, _base1, _name;
      this.log('debug', 'Adding the contributor:', contributor);
      contributorData = this.prepareContributor(contributor);
      if (!contributorData.username) {
        return null;
      }
      contributorData.id = contributorData.username.toLowerCase();
      existingContributorData = (_base = this.contributorsMap)[_name = contributorData.id] != null ? _base[_name] : _base[_name] = {};
      extendr.safeDeepExtendPlainObjects(existingContributorData, contributorData);
      this.contributorsMap[contributorData.id] = existingContributorData;
      if ((_base1 = this.contributorsMap[contributorData.id]).repos == null) {
        _base1.repos = {};
      }
      return this.contributorsMap[contributorData.id];
    };

    Getter.prototype.cloneContributor = function(contributor) {
      var contributorData;
      contributorData = extendr.safeDeepExtendPlainObjects({
        name: null,
        email: null,
        url: null,
        username: null,
        text: null,
        repos: null
      }, contributor);
      return contributorData;
    };

    Getter.prototype.prepareContributor = function(contributor) {
      var contributorData, usernameMatch;
      this.log('debug', 'Preparing the contributor:', contributor);
      contributorData = this.cloneContributor(contributor);
      if (contributorData.url && contributorData.username === null) {
        usernameMatch = /^.+?github.com\/([^\/]+).*$/.exec(contributorData.url);
        if (usernameMatch) {
          contributorData.username = (usernameMatch[1] || '').trim() || null;
        }
      }
      return contributorData;
    };

    Getter.prototype.prepareContributorFinale = function(contributor) {
      var contributorData;
      this.log('debug', 'Preparing the contributor for the final time:', contributor);
      contributorData = this.cloneContributor(contributor);
      contributorData.name || (contributorData.name = contributorData.username);
      contributorData.url || (contributorData.url = "https://github.com/" + contributorData.username);
      contributorData.text = [];
      contributorData.text.push(contributorData.name);
      if (contributorData.email) {
        contributorData.text.push("<" + contributorData.email + ">");
      }
      contributorData.text.push("(" + contributorData.url + ")");
      contributorData.text = contributorData.text.join(' ') || null;
      contributorData.markdown = "[" + contributorData.name + "](" + contributorData.url + ")";
      if (contributorData.email) {
        contributorData.markdown += " <" + contributorData.email + ">";
      }
      return contributorData;
    };

    Getter.prototype.getContributors = function(contributors) {
      var contributorsComparator, exists;
      this.log('debug', 'Get contributors');
      contributorsComparator = function(a, b) {
        var A, B;
        A = a.name.toLowerCase();
        B = b.name.toLowerCase();
        if (A === B) {
          return 0;
        } else if (A < B) {
          return -1;
        } else {
          return 1;
        }
      };
      if ((contributors != null) === false) {
        contributors = this.contributorsMap;
      } else {
        if (typeChecker.isArray(contributors) === true) {
          exists = {};
          contributors = contributors.filter(function(contributor) {
            var _name;
            if (exists[_name = contributor.username] == null) {
              exists[_name] = 0;
            }
            ++exists[contributor.username];
            return exists[contributor.username] === 1;
          });
        }
      }
      if (typeChecker.isPlainObject(contributors) === true) {
        contributors = Object.keys(contributors).map((function(_this) {
          return function(key) {
            return contributors[key];
          };
        })(this));
      }
      contributors = contributors.map(this.prepareContributorFinale.bind(this)).sort(contributorsComparator);
      return contributors;
    };

    Getter.prototype.fetchContributorsFromUsers = function(users, next) {
      var me;
      this.log('debug', 'Get contributors from users:', users);
      me = this;
      this.reposGetter.fetchReposFromUsers(users, function(err, repos) {
        var repo, repoNames;
        if (err) {
          return next(err, []);
        }
        repoNames = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = repos.length; _i < _len; _i++) {
            repo = repos[_i];
            if (repo.fork === true) {
              continue;
            }
            _results.push(repo.full_name);
          }
          return _results;
        })();
        return me.fetchContributorsFromRepos(repoNames, next);
      });
      return this;
    };

    Getter.prototype.fetchContributorsFromRepos = function(repos, next) {
      var me, result, tasks;
      this.log('debug', 'Get contributors from repos:', repos);
      me = this;
      result = [];
      tasks = new TaskGroup({
        concurrency: 0
      }).done(function(err) {
        if (err) {
          return next(err, []);
        }
        result = me.getContributors(result);
        return next(null, result);
      });
      repos.forEach(function(repo) {
        tasks.addTask(function(complete) {
          return me.fetchContributorsFromPackage(repo, function(err, contributors) {
            if (contributors == null) {
              contributors = [];
            }
            if (err) {
              return complete(err);
            }
            result.push.apply(result, contributors);
            return complete();
          });
        });
        return tasks.addTask(function(complete) {
          return me.fetchContributorsFromRepo(repo, function(err, contributors) {
            if (contributors == null) {
              contributors = [];
            }
            if (err) {
              return complete(err);
            }
            result.push.apply(result, contributors);
            return complete();
          });
        });
      });
      tasks.run();
      return this;
    };

    Getter.prototype.fetchContributorsFromPackage = function(repo, next) {
      var feedOptions, me;
      this.log('debug', 'Get contributors from package:', repo);
      me = this;
      feedOptions = {
        url: "http://raw.github.com/" + repo + "/master/package.json",
        format: 'json'
      };
      this.feedr.readFeed(feedOptions, function(err, packageData) {
        var addedContributor, addedContributors, contributor, contributorData, contributorMatch, _i, _len, _ref;
        if (err || (packageData == null)) {
          return next(null, []);
        }
        addedContributors = [];
        _ref = [].concat(packageData.contributors || []).concat(packageData.maintainers || []);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          contributor = _ref[_i];
          contributorData = {};
          if (typeChecker.isString(contributor)) {
            contributorMatch = /^([^<(]+)\s*(?:<(.+?)>)?\s*(?:\((.+?)\))?$/.exec(contributor);
            if (!contributorMatch) {
              continue;
            }
            contributorData = {
              name: (contributorMatch[1] || '').trim() || null,
              email: (contributorMatch[2] || '').trim() || null,
              url: (contributorMatch[3] || '').trim() || null,
              repos: {}
            };
          } else if (typeChecker.isPlainObject(contributor)) {
            contributorData = {
              name: contributor.name || null,
              email: contributor.email || null,
              url: contributor.web || null,
              username: contributor.username || null,
              repos: {}
            };
          } else {
            continue;
          }
          contributorData.repos[repo] = "https://github.com/" + repo;
          addedContributor = me.addContributor(contributorData);
          if (addedContributor) {
            addedContributors.push(addedContributor);
          }
        }
        return next(null, addedContributors);
      });
      return this;
    };

    Getter.prototype.fetchContributorsFromRepo = function(repo, next) {
      var feedOptions, me;
      this.log('debug', 'Get contributors from repo:', repo);
      me = this;
      feedOptions = {
        url: "https://api.github.com/repos/" + repo + "/contributors?per_page=100&client_id=" + this.config.githubClientId + "&client_secret=" + this.config.githubClientSecret,
        parse: 'json'
      };
      this.feedr.readFeed(feedOptions, function(err, data) {
        var addedContributor, addedContributors, contributor, contributorData, _i, _len;
        if (err) {
          return next(err, []);
        }
        if (!(data != null ? data.length : void 0)) {
          return next(null, []);
        }
        addedContributors = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          contributor = data[_i];
          contributorData = {
            url: contributor.html_url,
            username: contributor.login,
            repos: {}
          };
          contributorData.repos[repo] = "https://github.com/" + repo;
          addedContributor = me.addContributor(contributorData);
          if (addedContributor) {
            addedContributors.push(addedContributor);
          }
        }
        return next(null, addedContributors);
      });
      return this;
    };

    return Getter;

  })();

  module.exports = {
    create: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Getter, args, function(){});
    }
  };

}).call(this);
