{
  "name": "gulp",
  "description": "The streaming build system",
  "version": "4.0.0-alpha.1",
  "homepage": "http://gulpjs.com",
  "repository": {
    "type": "git",
    "url": "https://github.com/gulpjs/gulp"
  },
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "tags": [
    "build",
    "stream",
    "system",
    "make",
    "tool",
    "asset",
    "pipeline"
  ],
  "files": [
    "index.js",
    "bin"
  ],
  "bin": {
    "gulp": "./bin/gulp.js"
  },
  "man": [
    "gulp.1"
  ],
  "dependencies": {
    "gulp-cli": "git+https://github.com/gulpjs/gulp-cli#4.0",
    "undertaker": "^0.7.0",
    "vinyl-fs": "git+https://github.com/wearefractal/vinyl-fs"
  },
  "devDependencies": {
    "coveralls": "^2.7.0",
    "graceful-fs": "^3.0.0",
    "istanbul": "^0.3.0",
    "jshint": "^2.5.0",
    "jshint-stylish": "^1.0.0",
    "mkdirp": "^0.5.0",
    "mocha": "^2.0.1",
    "mocha-lcov-reporter": "^0.0.1",
    "q": "^1.0.0",
    "rimraf": "^2.2.5",
    "should": "^4.0.0"
  },
  "scripts": {
    "lint": "jshint bin index.js --reporter node_modules/jshint-stylish/stylish.js --exclude node_modules",
    "test": "npm run-script lint && mocha --reporter spec",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.githubusercontent.com/gulpjs/gulp/master/LICENSE"
    }
  ],
  "gitHead": "78751c834e1c7365f60dff7094c1d7e492b11997",
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# gulp [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Support us][gittip-image]][gittip-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url]\n> The streaming build system\n\n## Like what we do?\n\n[Support us via Gratipay](https://gratipay.com/WeAreFractal/)\n\n## Documentation\n\nFor a Getting started guide, API docs, recipes, making a plugin, etc. see the [documentation page](/docs/README.md)!\n\n## Sample `gulpfile.js`\n\nThis file is just a quick sample to give you a taste of what gulp does.\n\n```js\nvar gulp = require('gulp');\nvar coffee = require('gulp-coffee');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar imagemin = require('gulp-imagemin');\nvar sourcemaps = require('gulp-sourcemaps');\nvar del = require('del');\n\nvar paths = {\n  scripts: ['client/js/**/*.coffee', '!client/external/**/*.coffee'],\n  images: 'client/img/**/*'\n};\n\n/* Register some tasks to expose to the cli */\ngulp.task('build', gulp.series(\n  clean,\n  gulp.parallel(scripts, images)\n));\ngulp.task(clean);\ngulp.task(watch);\n\n// The default task (called when you run `gulp` from cli)\ngulp.task('default', gulp.series('build'));\n\n\n/* Define our tasks using plain functions */\n\n// Not all tasks need to use streams\n// A gulpfile is just another node program and you can use all packages available on npm\nfunction clean(done) {\n  // You can use multiple globbing patterns as you would with `gulp.src`\n  del(['build'], done);\n}\n\n// Copy all static images\nfunction images() {\n  return gulp.src(paths.images)\n    // Pass in options to the task\n    .pipe(imagemin({optimizationLevel: 5}))\n    .pipe(gulp.dest('build/img'));\n}\n\n// Minify and copy all JavaScript (except vendor scripts)\n// with sourcemaps all the way down\nfunction scripts() {\n  return gulp.src(paths.scripts)\n    .pipe(sourcemaps.init())\n      .pipe(coffee())\n      .pipe(uglify())\n      .pipe(concat('all.min.js'))\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('build/js'));\n}\n\n// Rerun the task when a file changes\nfunction watch() {\n  gulp.watch(paths.scripts, scripts);\n  gulp.watch(paths.images, images);\n}\n```\n\n## Incremental Builds\n\nYou can filter out unchanged files between runs of a task using\nthe `gulp.src` function's `since` option and `gulp.lastRun`:\n```js\nfunction images() {\n  return gulp.src(paths.images, {since: gulp.lastRun('images')})\n    .pipe(imagemin({optimizationLevel: 5}))\n    .pipe(gulp.dest('build/img'));\n}\n\nfunction watch() {\n  gulp.watch(paths.images, images);\n}\n```\nTask run times are saved in memory and are lost when gulp exits. It will only\nsave time during the `watch` task when running the `images` task\nfor a second time.\n\nIf you want to compare modification time between files instead, we recommend these plugins:\n- [gulp-changed];\n- or [gulp-newer] - supports many:1 source:dest.\n\n[gulp-newer] example:\n```js\nfunction images() {\n  var dest = 'build/img';\n  return gulp.src(paths.images)\n    .pipe(newer(dest))  // pass through newer images only\n    .pipe(imagemin({optimizationLevel: 5}))\n    .pipe(gulp.dest(dest));\n}\n```\n\nIf you can't simply filter out unchanged files, but need them in a later phase\nof the stream, we recommend these plugins:\n- [gulp-cached] - in-memory file cache, not for operation on sets of files\n- [gulp-remember] - pairs nicely with gulp-cached\n\n[gulp-remember] example:\n```js\nfunction scripts() {\n  return gulp.src(scriptsGlob)\n    .pipe(cache('scripts'))    // only pass through changed files\n    .pipe(header('(function () {')) // do special things to the changed files...\n    .pipe(footer('})();'))     // for example,\n                               // add a simple module wrap to each file\n    .pipe(remember('scripts')) // add back all files to the stream\n    .pipe(concat('app.js'))    // do things that require all files\n    .pipe(gulp.dest('public/'))\n}\n```\n\n## Want to contribute?\n\nAnyone can help make this project better - check out the [Contributing guide](/CONTRIBUTING.md)!\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/wearefractal/gulp/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n[gittip-url]: https://www.gittip.com/WeAreFractal/\n[gittip-image]: http://img.shields.io/gittip/WeAreFractal.svg\n\n[downloads-image]: http://img.shields.io/npm/dm/gulp.svg\n[npm-url]: https://npmjs.org/package/gulp\n[npm-image]: http://img.shields.io/npm/v/gulp.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/gulp\n[travis-image]: http://img.shields.io/travis/gulpjs/gulp.svg\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/gulp\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/gulp/master.svg\n\n[gulp-cached]: https://github.com/wearefractal/gulp-cached\n[gulp-remember]: https://github.com/ahaurw01/gulp-remember\n[gulp-changed]: https://github.com/sindresorhus/gulp-changed\n[gulp-newer]: https://github.com/tschaub/gulp-newer\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gulpjs/gulp/issues"
  },
  "_id": "gulp@4.0.0-alpha.1",
  "_shasum": "7e67d2195e74069abe57d2142023cb142accc4da",
  "_from": "git://github.com/gulpjs/gulp.git#4.0",
  "_resolved": "git://github.com/gulpjs/gulp.git#78751c834e1c7365f60dff7094c1d7e492b11997",
  "_fromGithub": true
}
